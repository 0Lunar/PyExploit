from src import dep, banner, clean, date
from src.ssti import ssti_payloads
from src.xxe import xxe_payloads
from src.ldap import ldap_payloads
from src.nosql import nosql_payloads
from colorama import init, Fore
import os, requests, subprocess, sys

dep.dep()

if __name__ == "__main__":
    try:
        clean.clean()
        if os.name == "nt":
            init(convert=True)
        banner.banner()
        choise = int(input(Fore.BLUE + "\n => " + Fore.YELLOW))
        print()
    except KeyboardInterrupt:
        print("\n\n" + date.INFO() + "KeyboardInterrupt detected")
        print(date.INFO() + "Exiting...")
        sys.exit()   
    except:
        print("\n" + date.ERROR() + "Something went wrong, exiting")
    try:
        if choise == 1:
            if os.path.isdir("tmp") == False:
                print(date.INFO() + "Creating the tmp folder")
                os.mkdir("tmp")
            if os.name == "nt":
                if os.path.isfile("tmp/winPEAS.exe"):
                    print(date.INFO() + "Executing winPEAS.exe")
                    try:
                        subprocess.Popen(["tmp/winPEAS.exe"])
                    except:
                        print(date.ERROR() + "Something went wrong, exiting")
                        sys.exit()
                else:
                    print(date.INFO() + "Downloading winPEAS")
                    r = requests.get("https://github.com/carlospolop/PEASS-ng/releases/download/20230510-778666a3/winPEASany.exe")
                    open("tmp/winPEAS.exe", "wb").write(r.content)
                    print(date.INFO() + "Executing winPEAS.exe")
                    try:
                        subprocess.Popen(["tmp/winPEAS.exe"])
                    except:
                        print(date.ERROR() + "Something went wrong, exiting")
                        sys.exit()
            else:
                if os.path.isfile("tmp/linPEAS.sh"):
                    print(date.INFO() + "Executing linPEAS.sh")
                    try:
                        os.system("chmod +x ./tmp/linPEAS.sh")
                        os.system("./tmp/linPEAS.sh")
                    except:
                        print(date.ERROR() + "Something went wrong, exiting")
                        sys.exit()
                else:
                    print(date.INFO() + "Downloading linPEAS")
                    r = requests.get("https://github.com/carlospolop/PEASS-ng/releases/download/20230510-778666a3/linpeas.sh")
                    open("tmp/linPEAS.sh", "wb").write(r.content)
                    print(date.INFO() + "Executing linPEAS.exe")
                    try:
                        os.system("chmod +x ./tmp/linPEAS.sh")
                        os.system("./tmp/linPEAS.sh")
                    except:
                        print(date.ERROR() + "Something went wrong, exiting")
                        sys.exit()

        elif choise == 2:
            clean.clean()
            banner.SSTI_banner()
            SSTI_choise = int(input(Fore.BLUE + "\n => " + Fore.YELLOW))
            if SSTI_choise == 1:
                ssti_payloads.test_payload()
            elif SSTI_choise == 2:
                clean.clean()
                banner.Java_SSTI_banner()
                SSTI_choise = int(input(Fore.BLUE + "\n => " + Fore.YELLOW))
                ssti_payloads.java_payload(num=SSTI_choise)
            elif SSTI_choise == 3:
                clean.clean()
                banner.Smarty_SSTI_banner()
                ssti_payloads.smarty_payload()
            elif SSTI_choise == 4:
                clean.clean()
                banner.Mako_SSTI_banner()
                ssti_payloads.mako_payload()
            elif SSTI_choise == 5:
                clean.clean()
                banner.Jinja2_SSTI_banner()
                ssti_payloads.jinja2_payload()
            elif SSTI_choise == 6:
                clean.clean()
                banner.Twig_SSTI_banner()
                ssti_payloads.twig_payload()
            else:
                print("\n" + date.ERROR() + "The Number is not valid")
                sys.exit()
        
        elif choise == 3:
            clean.clean()
            banner.xee_banner()
            xxe_choise = int(input(Fore.BLUE + "\n => " + Fore.YELLOW))
            if xxe_choise == 1:
                xxe_payloads.test_payload()
            elif xxe_choise == 2:
                print("\n" + Fore.WHITE + "[" + Fore.GREEN + "1" + Fore.WHITE + "] Attack 1")
                print(Fore.WHITE + "[" + Fore.GREEN + "2" + Fore.WHITE + "] Attack 2")
                print(Fore.WHITE + "[" + Fore.GREEN + "3" + Fore.WHITE + "] Attack 3")
                print(Fore.WHITE + "[" + Fore.GREEN + "4" + Fore.WHITE + "] Attack 4")
                cxxe_choise = int(input(Fore.BLUE + "\n => " + Fore.YELLOW))
                xxe_payloads.classic_xxe(num=cxxe_choise)
            elif xxe_choise == 3:
                xxe_payloads.classic_xxe_base64()
            elif xxe_choise == 4:
                print("\n" + Fore.WHITE + "[" + Fore.GREEN + "1" + Fore.WHITE + "] Attack 1")
                print(Fore.WHITE + "[" + Fore.GREEN + "2" + Fore.WHITE + "] Attack 2")
                pxxe_choise = int(input(Fore.BLUE + "\n => " + Fore.YELLOW))
                xxe_payloads.php_wrapper_inside_xxe(num=pxxe_choise)
            elif xxe_choise == 5:
                xxe_payloads.xinclude()
            else:
                print(date.ERROR() + "The Number is not valid")
                sys.exit()

        elif choise == 4:
            clean.clean()
            banner.ldap_banner()
            ldap_choise = int(input(Fore.BLUE + "\n => " + Fore.YELLOW))
            if ldap_choise == 1:
                ldap_payloads.payloads_list()
            elif ldap_choise == 2:
                ldap_payloads.blind_exploitation()
            elif ldap_choise == 3:
                print("\n" + date.INFO() + "Enter the url to attack")
                url = input(Fore.BLUE + "\n => " + Fore.YELLOW)
                ldap_payloads.discover_ldap(url)
            elif ldap_choise == 4:
                print("\n" + date.INFO() + "Enter the url to attack")
                url = input(Fore.BLUE + "\n => " + Fore.YELLOW)
                ldap_payloads.special_blind_ldap(url)
            else:
                print("\n" + date.ERROR() + "The Number is not valid")
                sys.exit()

        elif choise == 5:
            clean.clean()
            banner.nosql_banner()
            nosql_choise = int(input(Fore.BLUE + "\n => " + Fore.YELLOW))
            if nosql_choise == 1:
                nosql_payloads.auth_bypass()
            elif nosql_choise == 2:
                nosql_payloads.mongodb()
            elif nosql_choise == 3:
                nosql_payloads.extract_data()
            else:
                print("\n" + date.ERROR() + "The Number is not valid")
                sys.exit()

        else:
            print(date.ERROR() + "The Number is not valid")
            sys.exit()
    except KeyboardInterrupt:
        print("\n\n" + date.INFO() + "KeyboardInterrupt detected")
        print(date.INFO() + "Exiting...")
        sys.exit()
    except SystemExit:
        sys.exit()
    except ValueError:
        print("\n" + date.ERROR() + "Only ")
    except:
        print("\n" + date.ERROR() + "Something went wrong, exiting")
        sys.exit()
    print("\n" + date.SUCCESS() + "Done.")
